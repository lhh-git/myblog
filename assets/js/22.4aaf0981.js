(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{385:function(a,t,e){"use strict";e.r(t);var s=e(45),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h2",{attrs:{id:"简单类型-原始类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简单类型-原始类型"}},[a._v("#")]),a._v(" 简单类型（原始类型）")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('原始数据\n原始数据值是一种没有额外属性和方法的单一简单数据值。\n\ntypeof 运算符可返回以下原始类型之一：\nstring\nnumber\nboolean\nundefined\n\ntypeof "Bill"              // 返回 "string"\ntypeof 3.14                // 返回 "number"\ntypeof true                // 返回 "boolean"\ntypeof false               // 返回 "boolean"\ntypeof x                   // 返回 "undefined" (假如 x 没有值)\n')])])]),e("h3",{attrs:{id:"字符串值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串值"}},[a._v("#")]),a._v(" 字符串值")]),a._v(" "),e("p",[a._v('字符串（或文本字符串）是一串字符（比如 "Bill Gates"）。\n字符串被引号包围。您可使用单引号或双引号：')]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var carName = \"Porsche 911\";   // 使用双引号\nvar carName = 'Porsche 911';   // 使用单引号\n")])])]),e("p",[a._v("您可以在字符串内使用引号，只要这些引号与包围字符串的引号不匹配：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var answer = "It\'s alright";           // 双引号内的单引号\nvar answer = "He is called \'Bill\'";    // 双引号内的单引号\nvar answer = \'He is called "Bill"\';    // 单引号内的双引号\n')])])]),e("p",[a._v("空值与 undefined 不是一回事。\n空的字符串变量既有值也有类型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var car = "";                // 值是 ""，类型是 "string"\n')])])]),e("h3",{attrs:{id:"数值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数值"}},[a._v("#")]),a._v(" 数值")]),a._v(" "),e("p",[a._v("JavaScript 只有一种数值类型。\n写数值时用不用小数点均可：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x1 = 34.00;     // 带小数点\nvar x2 = 34;        // 不带小数点\n")])])]),e("h3",{attrs:{id:"布尔值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[a._v("#")]),a._v(" 布尔值")]),a._v(" "),e("p",[a._v("布尔值只有两个值：true 或 false。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var x = true;\nvar y = false;\n")])])]),e("h3",{attrs:{id:"undefined"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[a._v("#")]),a._v(" Undefined")]),a._v(" "),e("p",[a._v("在 JavaScript 中，没有值的变量，其值是 undefined。typeof 也返回 undefined。\n您也可以通过设置值为 undefined 清空对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var person;                  // 值是 undefined，类型是 undefined\n")])])]),e("h2",{attrs:{id:"复杂类型-引用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#复杂类型-引用类型"}},[a._v("#")]),a._v(" 复杂类型（引用类型）")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('复杂数据\ntypeof 运算符可返回以下两种类型之一：\nfunction\nobject\ntypeof 运算符把对象、数组或 null 返回 object。\ntypeof 运算符不会把函数返回 object。\n\ntypeof {name:\'Bill\', age:62} // 返回 "object"\ntypeof [1,2,3,4]             // 返回 "object" (并非 "array"，参见下面的注释)\ntypeof null                  // 返回 "object"\ntypeof function myFunc(){}   // 返回 "function"\n')])])]),e("h3",{attrs:{id:"对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[a._v("#")]),a._v(" 对象")]),a._v(" "),e("p",[a._v("JavaScript 对象用花括号来书写。\n对象属性是 name:value 对，由逗号分隔。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var person = {firstName:"Bill", lastName:"Gates", age:62, eyeColor:"blue"};\n')])])]),e("h3",{attrs:{id:"null"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[a._v("#")]),a._v(" Null")]),a._v(" "),e("p",[a._v('在 JavaScript 中，null 是 "nothing"。它被看做不存在的事物。\n不幸的是，在 JavaScript 中，null 的数据类型是对象。\n您可以把 null 在 JavaScript 中是对象理解为一个 bug。它本应是 null。\n您可以通过设置值为 null 清空对象：')]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var person = null;           // 值是 null，但是类型仍然是对象\n")])])]),e("h3",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),e("p",[a._v("JavaScript 数组用方括号书写。\n数组的项目由逗号分隔。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var cars = ["Porsche", "Volvo", "BMW"];\n')])])]),e("h2",{attrs:{id:"undefined-与-null-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#undefined-与-null-的区别"}},[a._v("#")]),a._v(" Undefined 与 Null 的区别")]),a._v(" "),e("p",[a._v("Undefined 与 null 的值相等，但类型不相等：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("typeof undefined              // undefined\ntypeof null                   // object\nnull === undefined            // false\nnull == undefined             // true\n")])])]),e("h2",{attrs:{id:"检测数组类型的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#检测数组类型的方法"}},[a._v("#")]),a._v(" 检测数组类型的方法")]),a._v(" "),e("h3",{attrs:{id:"instanceof-操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-操作符"}},[a._v("#")]),a._v(" instanceof  操作符")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const arr = [1, 2, 3]\narr instanceof Array          // true\n")])])]),e("h3",{attrs:{id:"对象的-constructor-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象的-constructor-属性"}},[a._v("#")]),a._v(" 对象的 constructor 属性")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const arr = [1, 2, 3]\narr constructor Array         // true\n")])])]),e("h3",{attrs:{id:"array-isarray-检验值是否为数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#array-isarray-检验值是否为数组"}},[a._v("#")]),a._v(" Array.isArray( ) 检验值是否为数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("const arr = [1, 2, 3]\nArray.isArray(arr)            // true\n")])])]),e("h2",{attrs:{id:"tostring-方法检查类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tostring-方法检查类型"}},[a._v("#")]),a._v(" tostring()方法检查类型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('const arr = [1, 2, 3]\nconst obj = {\n  name: \'jack\'\n}\nfunction fn(name,age){\n  this.name = name;\n  this.age = age;\n}\n\nObject.prototype.toString.call(arr)    // "[object Array]"\nObject.prototype.toString.call(obj)    // "[object Object]"\nObject.prototype.toString.call(fn)     // "[object Function]"\n')])])]),e("h2",{attrs:{id:"封装一个方法判断数组和对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装一个方法判断数组和对象"}},[a._v("#")]),a._v(" 封装一个方法判断数组和对象")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var _toString = Object.prototype.toString;\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);